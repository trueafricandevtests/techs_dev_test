import http.server
import socketserver
from urllib.parse import parse_qs, urlparse
import json


class handler(http.server.SimpleHTTPRequestHandler):

    def getData(self):
        f = open('data.json',)
        data = json.load(f)
        return data

    def uniqueRecipe(self):
       my_list_recipe = [] 
       data = self.getData()
       for i in data:     
           my_list_recipe.append(i['recipe'])
       number_of_unique_values = len(set(my_list_recipe))
       return number_of_unique_values

    def getRecipeList(self):
        my_list_recipe = []
        data = self.getData()
        for i in data:     
           my_list_recipe.append(i['recipe'])
        return my_list_recipe
    
    def getPostCodeList(self):
        my_list_postcode = []
        data = self.getData()
        for i in data:     
            my_list_postcode.append(i['postcode'])
        return my_list_postcode

    def occurencesRecipe(self):
        dic = {}
        myFinallist = []
        count_per_recipe = []
        my_list_recipe = self.getRecipeList()
        my_list_recipe.sort()
        for i in set(my_list_recipe):
            if i not in myFinallist:
                myFinallist.append(i)
                dic = {'recipe':i, 'count': my_list_recipe.count(i)}
                count_per_recipe.append(dic)
                
        return count_per_recipe

    def busiestPostCode(self):
        dic = {}
        secondList = []
        my_postcode = self.getPostCodeList()
        for i in set(my_postcode):
            if i not in secondList:
                secondList.append(my_postcode.count(i))
                max_ = max(secondList)
                if my_postcode.count(i) == max_:
                    dic = {'postcode': i, 'delivery_count': my_postcode.count(i)}
        return dic

    def matchByName(self):
        match_by_name = []
        my_list_recipe = self.getRecipeList()
        data = self.getData()
        for i in data:     
            my_list_recipe.append(i['recipe'])
            my_list_recipe.sort()

        for i in set(my_list_recipe):
            if 'Veggie' in i or 'Potato' in i or 'Mushroom' in i: 
                match_by_name.append(i)
            
        match_by_name.sort()
        return match_by_name



    def do_GET(self):
        # Sending an '200 OK' response
        self.send_response(200)
        # Setting the header
        self.send_header("Content-type", "text/html")
        # Whenever using 'send_header', you also have to call 'end_headers'
        self.end_headers()
        # Extract query param
      
        query_components = parse_qs(urlparse(self.path).query)

        if 'uniquerecipecount' in query_components:
             # Some custom HTML code, possibly generated by another function
            html = f"<html><head></head><body><h1> { self.uniqueRecipe() }</h1></body></html>"
            with open('uniquerecipe.json', 'w') as outfile:
                pe = self.uniqueRecipe()
                json.dump(pe, outfile)
            self.wfile.write(bytes(html, "utf8"))

        elif 'occurences' in query_components:
            
            html = f"<html><head></head><body><h1> { self.occurencesRecipe() }</h1></body></html>"
            with open('occurences.json', 'w') as outfile:
                pe = self.occurencesRecipe()
                json.dump(pe, outfile)
            self.wfile.write(bytes(html, "utf8"))

        elif 'busiestpostcode' in query_components:
        
            html = f"<html><head></head><body><h1> { self.busiestPostCode() }</h1></body></html>"
            with open('busiestpostcode.json', 'w') as outfile:
                pe = self.busiestPostCode()
                json.dump(pe, outfile)
            self.wfile.write(bytes(html, "utf8"))

        elif 'matches' in query_components:
        
            html = f"<html><head></head><body><h1> { self.matchByName() }</h1></body></html>"
            with open('busiestpostcode.json', 'w') as outfile:
                pe = self.matchByName()
                json.dump(pe, outfile)
            self.wfile.write(bytes(html, "utf8"))
        else:
            html = f"<html><head></head><body><h1>EndPoints</h1><br>Functional Requirement 1 ---><h2>http://127.0.0.1:8080/?uniquerecipecount=1</h2><br><h2>http://127.0.0.1:8080/?occurences=1</h2><br><h2>http://127.0.0.1:8080/?busiestpostcode=1</h2><br><h2>http://127.0.0.1:8080/?matches=1</h2><br></body></html>"
            self.wfile.write(bytes(html, "utf8"))


        # Writing the HTML contents with UTF-8
        
        return

PORT = 8080

myhandler = handler

myserver = socketserver.TCPServer(("", PORT), myhandler)
print("SERVER START")
myserver.serve_forever()

